/**
 *  @file
 *  @copyright defined in eos/LICENSE.txt
 */
#include <eosio/chain/abi_serializer.hpp>
#include <eosio/chain/resource_limits.hpp>
#include <eosio/chain/generated_transaction_object.hpp>
#include <eosio/testing/tester.hpp>

#include <Runtime/Runtime.h>

#include <fc/variant_object.hpp>

#include <boost/test/unit_test.hpp>

#include <contracts.hpp>

#include "fork_test_utilities.hpp"

using namespace eosio::chain;
using namespace eosio::testing;

BOOST_AUTO_TEST_SUITE(eth_account_tests)
#if 1
const unsigned char evm_code[] = {0xf9,0x01,0xc5,0x80,0x17,0x83,0x1e,0x84,0x80,0x80,0x80,0xb9,0x01,0x77,0x60,0x80,0x60,0x40,0x52,0x34,0x80,0x15,0x61,0x00,0x10,0x57,0x60,0x00,0x80,0xfd,0x5b,0x50,0x60,0x01,0x60,0x00,0x81,0x90,0x55,0x50,0x61,0x01,0x4f,0x80,0x61,0x00,0x28,0x60,0x00,0x39,0x60,0x00,0xf3,0x00,0x60,0x80,0x60,0x40,0x52,0x60,0x04,0x36,0x10,0x61,0x00,0x4c,0x57,0x60,0x00,0x35,0x7c,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x90,0x04,0x63,0xff,0xff,0xff,0xff,0x16,0x80,0x63,0x20,0x96,0x52,0x55,0x14,0x61,0x00,0x51,0x57,0x80,0x63,0x55,0x24,0x10,0x77,0x14,0x61,0x00,0x6f,0x57,0x5b,0x60,0x00,0x80,0xfd,0x5b,0x61,0x00,0x59,0x61,0x00,0x8f,0x56,0x5b,0x60,0x40,0x51,0x80,0x82,0x81,0x52,0x60,0x20,0x01,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x03,0x90,0xf3,0x5b,0x61,0x00,0x8d,0x60,0x04,0x80,0x36,0x03,0x81,0x01,0x90,0x80,0x80,0x35,0x90,0x60,0x20,0x01,0x90,0x92,0x91,0x90,0x50,0x50,0x50,0x61,0x00,0xe2,0x56,0x5b,0x00,0x5b,0x60,0x00,0x33,0x73,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x16,0x61,0x08,0xfc,0x61,0x03,0xe8,0x90,0x81,0x15,0x02,0x90,0x60,0x40,0x51,0x60,0x00,0x60,0x40,0x51,0x80,0x83,0x03,0x81,0x85,0x88,0x88,0xf1,0x93,0x50,0x50,0x50,0x50,0x15,0x80,0x15,0x61,0x00,0xd9,0x57,0x3d,0x60,0x00,0x80,0x3e,0x3d,0x60,0x00,0xfd,0x5b,0x50,0x60,0x00,0x54,0x90,0x50,0x90,0x56,0x5b,0x80,0x60,0x00,0x81,0x90,0x55,0x50,0x7f,0xf4,0x8a,0x1d,0xc5,0x7e,0xef,0xa3,0xde,0x44,0x06,0xe6,0x5f,0xc0,0xfc,0x37,0x7b,0x25,0xd1,0x00,0xbd,0x06,0x42,0x92,0x01,0xa0,0x1a,0x9e,0x8e,0x0e,0x1d,0x07,0x73,0x81,0x60,0x40,0x51,0x80,0x82,0x81,0x52,0x60,0x20,0x01,0x91,0x50,0x50,0x60,0x40,0x51,0x80,0x91,0x03,0x90,0xa1,0x50,0x56,0x00,0xa1,0x65,0x62,0x7a,0x7a,0x72,0x30,0x58,0x20,0x0e,0xf4,0x99,0x24,0x52,0x9c,0x42,0x96,0xa4,0x06,0x2b,0x5e,0xbe,0x03,0x59,0xff,0x0b,0x7d,0x08,0x3d,0xe1,0x72,0xb6,0xcc,0x5e,0xc8,0xd0,0x08,0x0f,0x89,0x97,0x7e,0x00,0x29,0x1b,0xa0,0xd6,0x1f,0x3b,0x02,0x1a,0x97,0x12,0xb3,0x6c,0xcf,0x39,0xa3,0xd7,0x68,0x65,0x35,0x9e,0xd3,0x40,0x59,0x42,0x88,0xe2,0x27,0x36,0x84,0x06,0x30,0xf6,0x38,0x49,0x5f,0xa0,0x51,0x9e,0xa6,0x9f,0x8f,0x0e,0x78,0xa8,0xf1,0xce,0x3b,0x82,0x3f,0xd0,0x02,0x75,0xbe,0xd0,0x1c,0xde,0x70,0x99,0x4c,0x82,0x20,0xca,0xc5,0xf7,0x19,0x85,0x4b,0xec};
const unsigned char trx_set_value[] = {0xf8,0x84,0x80,0x17,0x83,0x1e,0x84,0x80,0x94,0xc0,0xaa,0xe1,0xed,0xd7,0xa7,0x6c,0x8c,0xf9,0x9e,0x5b,0xa3,0xca,0x69,0x59,0x9e,0xd2,0x95,0x40,0xea,0x80,0xa4,0x55,0x24,0x10,0x77,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xd0,0xd8,0x1c,0xa0,0x95,0x8f,0x14,0x1f,0x9b,0x4a,0x2e,0xb9,0xc6,0x75,0xc3,0x12,0x4a,0xef,0x8a,0x8a,0xfd,0xb9,0x99,0xce,0x35,0x92,0xfb,0x88,0x7f,0x3a,0x0e,0x72,0x71,0x71,0x42,0x04,0xa0,0x76,0x17,0x45,0x43,0x38,0x2e,0x19,0x2e,0xb6,0xbc,0xf5,0xd4,0x2d,0x2a,0x72,0xe1,0xac,0xd9,0x3b,0xd2,0xb4,0x78,0xa0,0x73,0x3e,0x12,0x34,0x52,0x0a,0x2d,0xc2,0x34};
const unsigned char trx_get_value[] = {0xf8,0x64,0x80,0x17,0x83,0x1e,0x84,0x80,0x94,0xc0,0xaa,0xe1,0xed,0xd7,0xa7,0x6c,0x8c,0xf9,0x9e,0x5b,0xa3,0xca,0x69,0x59,0x9e,0xd2,0x95,0x40,0xea,0x80,0x84,0x20,0x96,0x52,0x55,0x1c,0xa0,0x75,0xdd,0xa0,0x9f,0xbc,0xeb,0xea,0x20,0x91,0xdc,0xb0,0x29,0x12,0xac,0xca,0xc3,0xd7,0xf3,0x4c,0xa8,0x6b,0x1f,0x34,0xc8,0x7d,0x3f,0xd3,0xa4,0xf7,0x55,0xdf,0xcf,0xa0,0x28,0x4c,0x51,0x79,0xbb,0xd3,0xfb,0xd0,0x23,0xcf,0xa6,0x2d,0x2b,0x4d,0x17,0xb7,0x71,0xd3,0xc3,0x55,0xc1,0xf5,0xaf,0xc9,0xb5,0x7c,0x60,0xbf,0xe1,0xf2,0x76,0x0f};


BOOST_AUTO_TEST_CASE( test1 ) try {
   tester c( setup_policy::preactivate_feature_and_new_bios );

   c.create_accounts( {N(alice), N(bob), N(charlie)} );
   c.produce_block();
   
   BOOST_CHECK_EXCEPTION( c.set_code( N(bob), contracts::test_eth_account_wasm() ),
                          wasm_exception, fc_exception_message_is("env.evm_execute unresolveable")
   );

   const auto& pfm = c.control->get_protocol_feature_manager();
   const auto& d = pfm.get_builtin_digest( builtin_protocol_feature_t::ethereum_vm );
   BOOST_REQUIRE( d );

   c.preactivate_protocol_features( {*d} );
   c.produce_block();

   c.set_code( N(bob), contracts::test_eth_account_wasm() );
   c.produce_block();

{
   action act;
   act.account = N(bob);
   act.name = N(testcreate);
   auto ret = c.push_action( std::move(act), N(bob).to_uint64_t());
   c.produce_block();
}

} FC_LOG_AND_RETHROW()


BOOST_AUTO_TEST_CASE( test2 ) try {
   tester c( setup_policy::preactivate_feature_and_new_bios );

   const auto& pfm = c.control->get_protocol_feature_manager();
   const auto& d = pfm.get_builtin_digest( builtin_protocol_feature_t::ethereum_vm );
   BOOST_REQUIRE( d );
   
   c.preactivate_protocol_features( {*d} );
   c.produce_block();

   c.create_accounts( {N(alice), N(bob), N(charlie)} );
   c.produce_block();

   c.set_code( N(bob), contracts::test_eth_account_wasm() );

#if 1
{
   action act;
   act.account = N(bob);
   act.name = N(testsetcode);
   act.data.resize(sizeof(evm_code));
   memcpy(act.data.data(), evm_code, sizeof(evm_code));
   auto ret = c.push_action( std::move(act), N(bob).to_uint64_t());
   c.produce_block();
}
#endif

{
   action act;
   act.account = N(bob);
   act.name = N(testcall);
   act.data.resize(sizeof(trx_set_value));
   memcpy(act.data.data(), trx_set_value, sizeof(trx_set_value));
   auto ret = c.push_action( std::move(act), N(bob).to_uint64_t());
   c.produce_block();
}

{
   action act;
   act.account = N(bob);
   act.name = N(testcall);
   act.data.resize(sizeof(trx_get_value));
   memcpy(act.data.data(), trx_get_value, sizeof(trx_get_value));
   auto ret = c.push_action( std::move(act), N(bob).to_uint64_t());
   c.produce_block();
}

{
   action act;
   act.account = N(bob);
   act.name = N(testexists);
   auto ret = c.push_action( std::move(act), N(bob).to_uint64_t());
   c.produce_block();
}

} FC_LOG_AND_RETHROW()
#endif
BOOST_AUTO_TEST_SUITE_END()
